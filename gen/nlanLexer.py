from antlr4 import *
from io import StringIO
import sys
from typing import TextIO


def serializedATN():
    return [
        4,0,36,400,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,
        5,33,383,8,33,10,33,12,33,386,9,33,1,34,1,34,4,34,390,8,34,11,34,
        12,34,391,1,34,1,34,1,35,4,35,397,8,35,11,35,12,35,398,0,0,36,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,1,0,4,3,0,9,10,13,13,32,32,2,0,65,90,97,122,3,0,48,57,65,90,97,
        122,1,0,48,57,402,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,79,1,0,0,0,5,87,1,0,0,
        0,7,101,1,0,0,0,9,115,1,0,0,0,11,119,1,0,0,0,13,125,1,0,0,0,15,131,
        1,0,0,0,17,136,1,0,0,0,19,151,1,0,0,0,21,160,1,0,0,0,23,162,1,0,
        0,0,25,171,1,0,0,0,27,181,1,0,0,0,29,194,1,0,0,0,31,215,1,0,0,0,
        33,227,1,0,0,0,35,247,1,0,0,0,37,254,1,0,0,0,39,273,1,0,0,0,41,291,
        1,0,0,0,43,300,1,0,0,0,45,307,1,0,0,0,47,321,1,0,0,0,49,333,1,0,
        0,0,51,343,1,0,0,0,53,355,1,0,0,0,55,357,1,0,0,0,57,359,1,0,0,0,
        59,361,1,0,0,0,61,363,1,0,0,0,63,365,1,0,0,0,65,367,1,0,0,0,67,380,
        1,0,0,0,69,387,1,0,0,0,71,396,1,0,0,0,73,74,5,115,0,0,74,75,5,116,
        0,0,75,76,5,97,0,0,76,77,5,114,0,0,77,78,5,116,0,0,78,2,1,0,0,0,
        79,80,5,122,0,0,80,81,5,97,0,0,81,82,5,107,0,0,82,83,5,111,0,0,83,
        84,5,110,0,0,84,85,5,99,0,0,85,86,5,122,0,0,86,4,1,0,0,0,87,88,5,
        115,0,0,88,89,5,116,0,0,89,90,5,119,0,0,90,91,5,111,0,0,91,92,5,
        114,0,0,92,93,5,122,0,0,93,94,5,90,0,0,94,95,5,109,0,0,95,96,5,105,
        0,0,96,97,5,101,0,0,97,98,5,110,0,0,98,99,5,110,0,0,99,100,5,97,
        0,0,100,6,1,0,0,0,101,102,5,115,0,0,102,103,5,116,0,0,103,104,5,
        119,0,0,104,105,5,111,0,0,105,106,5,114,0,0,106,107,5,122,0,0,107,
        108,5,84,0,0,108,109,5,97,0,0,109,110,5,98,0,0,110,111,5,108,0,0,
        111,112,5,105,0,0,112,113,5,99,0,0,113,114,5,101,0,0,114,8,1,0,0,
        0,115,116,7,0,0,0,116,117,1,0,0,0,117,118,6,4,0,0,118,10,1,0,0,0,
        119,120,5,100,0,0,120,121,5,111,0,0,121,122,5,100,0,0,122,123,5,
        97,0,0,123,124,5,99,0,0,124,12,1,0,0,0,125,126,5,111,0,0,126,127,
        5,100,0,0,127,128,5,106,0,0,128,129,5,97,0,0,129,130,5,99,0,0,130,
        14,1,0,0,0,131,132,5,114,0,0,132,133,5,97,0,0,133,134,5,122,0,0,
        134,135,5,121,0,0,135,16,1,0,0,0,136,137,5,112,0,0,137,138,5,111,
        0,0,138,139,5,100,0,0,139,140,5,122,0,0,140,141,5,105,0,0,141,142,
        5,101,0,0,142,143,5,108,0,0,143,144,5,105,0,0,144,145,5,99,0,0,145,
        146,5,80,0,0,146,147,5,114,0,0,147,148,5,122,0,0,148,149,5,101,0,
        0,149,150,5,122,0,0,150,18,1,0,0,0,151,152,5,100,0,0,152,153,5,111,
        0,0,153,154,5,80,0,0,154,155,5,111,0,0,155,156,5,116,0,0,156,157,
        5,101,0,0,157,158,5,103,0,0,158,159,5,105,0,0,159,20,1,0,0,0,160,
        161,5,44,0,0,161,22,1,0,0,0,162,163,5,114,0,0,163,164,5,111,0,0,
        164,165,5,119,0,0,165,166,5,110,0,0,166,167,5,97,0,0,167,168,5,83,
        0,0,168,169,5,105,0,0,169,170,5,101,0,0,170,24,1,0,0,0,171,172,5,
        106,0,0,172,173,5,101,0,0,173,174,5,115,0,0,174,175,5,116,0,0,175,
        176,5,82,0,0,176,177,5,111,0,0,177,178,5,119,0,0,178,179,5,110,0,
        0,179,180,5,101,0,0,180,26,1,0,0,0,181,182,5,106,0,0,182,183,5,101,
        0,0,183,184,5,115,0,0,184,185,5,116,0,0,185,186,5,77,0,0,186,187,
        5,110,0,0,187,188,5,105,0,0,188,189,5,101,0,0,189,190,5,106,0,0,
        190,191,5,115,0,0,191,192,5,122,0,0,192,193,5,101,0,0,193,28,1,0,
        0,0,194,195,5,106,0,0,195,196,5,101,0,0,196,197,5,115,0,0,197,198,
        5,116,0,0,198,199,5,77,0,0,199,200,5,110,0,0,200,201,5,105,0,0,201,
        202,5,101,0,0,202,203,5,106,0,0,203,204,5,115,0,0,204,205,5,122,
        0,0,205,206,5,101,0,0,206,207,5,76,0,0,207,208,5,117,0,0,208,209,
        5,98,0,0,209,210,5,82,0,0,210,211,5,111,0,0,211,212,5,119,0,0,212,
        213,5,110,0,0,213,214,5,101,0,0,214,30,1,0,0,0,215,216,5,106,0,0,
        216,217,5,101,0,0,217,218,5,115,0,0,218,219,5,116,0,0,219,220,5,
        87,0,0,220,221,5,105,0,0,221,222,5,101,0,0,222,223,5,107,0,0,223,
        224,5,115,0,0,224,225,5,122,0,0,225,226,5,101,0,0,226,32,1,0,0,0,
        227,228,5,106,0,0,228,229,5,101,0,0,229,230,5,115,0,0,230,231,5,
        116,0,0,231,232,5,87,0,0,232,233,5,105,0,0,233,234,5,101,0,0,234,
        235,5,107,0,0,235,236,5,115,0,0,236,237,5,122,0,0,237,238,5,101,
        0,0,238,239,5,76,0,0,239,240,5,117,0,0,240,241,5,98,0,0,241,242,
        5,82,0,0,242,243,5,111,0,0,243,244,5,119,0,0,244,245,5,110,0,0,245,
        246,5,101,0,0,246,34,1,0,0,0,247,248,5,106,0,0,248,249,5,101,0,0,
        249,250,5,122,0,0,250,251,5,101,0,0,251,252,5,108,0,0,252,253,5,
        105,0,0,253,36,1,0,0,0,254,255,5,100,0,0,255,256,5,108,0,0,256,257,
        5,97,0,0,257,258,5,75,0,0,258,259,5,97,0,0,259,260,5,122,0,0,260,
        261,5,100,0,0,261,262,5,101,0,0,262,263,5,103,0,0,263,264,5,111,
        0,0,264,265,5,69,0,0,265,266,5,108,0,0,266,267,5,101,0,0,267,268,
        5,109,0,0,268,269,5,101,0,0,269,270,5,110,0,0,270,271,5,116,0,0,
        271,272,5,117,0,0,272,38,1,0,0,0,273,274,5,100,0,0,274,275,5,108,
        0,0,275,276,5,97,0,0,276,277,5,75,0,0,277,278,5,97,0,0,278,279,5,
        122,0,0,279,280,5,100,0,0,280,281,5,101,0,0,281,282,5,106,0,0,282,
        283,5,87,0,0,283,284,5,97,0,0,284,285,5,114,0,0,285,286,5,116,0,
        0,286,287,5,111,0,0,287,288,5,115,0,0,288,289,5,99,0,0,289,290,5,
        105,0,0,290,40,1,0,0,0,291,292,5,90,0,0,292,293,5,90,0,0,293,294,
        5,97,0,0,294,295,5,107,0,0,295,296,5,114,0,0,296,297,5,101,0,0,297,
        298,5,115,0,0,298,299,5,117,0,0,299,42,1,0,0,0,300,301,5,100,0,0,
        301,302,5,111,0,0,302,303,5,112,0,0,303,304,5,111,0,0,304,305,5,
        107,0,0,305,306,5,105,0,0,306,44,1,0,0,0,307,308,5,119,0,0,308,309,
        5,121,0,0,309,310,5,112,0,0,310,311,5,105,0,0,311,312,5,115,0,0,
        312,313,5,122,0,0,313,314,5,90,0,0,314,315,5,109,0,0,315,316,5,105,
        0,0,316,317,5,101,0,0,317,318,5,110,0,0,318,319,5,110,0,0,319,320,
        5,97,0,0,320,46,1,0,0,0,321,322,5,119,0,0,322,323,5,121,0,0,323,
        324,5,112,0,0,324,325,5,105,0,0,325,326,5,115,0,0,326,327,5,122,
        0,0,327,328,5,84,0,0,328,329,5,101,0,0,329,330,5,107,0,0,330,331,
        5,115,0,0,331,332,5,116,0,0,332,48,1,0,0,0,333,334,5,111,0,0,334,
        335,5,87,0,0,335,336,5,97,0,0,336,337,5,114,0,0,337,338,5,116,0,
        0,338,339,5,111,0,0,339,340,5,115,0,0,340,341,5,99,0,0,341,342,5,
        105,0,0,342,50,1,0,0,0,343,344,5,107,0,0,344,345,5,111,0,0,345,346,
        5,110,0,0,346,347,5,105,0,0,347,348,5,101,0,0,348,349,5,99,0,0,349,
        350,5,80,0,0,350,351,5,101,0,0,351,352,5,116,0,0,352,353,5,108,0,
        0,353,354,5,105,0,0,354,52,1,0,0,0,355,356,5,91,0,0,356,54,1,0,0,
        0,357,358,5,93,0,0,358,56,1,0,0,0,359,360,5,40,0,0,360,58,1,0,0,
        0,361,362,5,41,0,0,362,60,1,0,0,0,363,364,5,38,0,0,364,62,1,0,0,
        0,365,366,5,58,0,0,366,64,1,0,0,0,367,368,5,110,0,0,368,369,5,97,
        0,0,369,370,5,108,0,0,370,371,5,101,0,0,371,372,5,122,0,0,372,373,
        5,97,0,0,373,374,5,99,0,0,374,375,5,101,0,0,375,376,5,103,0,0,376,
        377,5,111,0,0,377,378,5,68,0,0,378,379,5,111,0,0,379,66,1,0,0,0,
        380,384,7,1,0,0,381,383,7,2,0,0,382,381,1,0,0,0,383,386,1,0,0,0,
        384,382,1,0,0,0,384,385,1,0,0,0,385,68,1,0,0,0,386,384,1,0,0,0,387,
        389,5,34,0,0,388,390,7,1,0,0,389,388,1,0,0,0,390,391,1,0,0,0,391,
        389,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,394,5,34,0,0,394,
        70,1,0,0,0,395,397,7,3,0,0,396,395,1,0,0,0,397,398,1,0,0,0,398,396,
        1,0,0,0,398,399,1,0,0,0,399,72,1,0,0,0,4,0,384,391,398,1,6,0,0
    ]

class nlanLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    SPACE = 5
    PLUS = 6
    MINUS = 7
    MULTIPLICATION = 8
    DIVIDE = 9
    POWER = 10
    COMA = 11
    EQ = 12
    DOUBLEEQ = 13
    LESS = 14
    LESSEQ = 15
    GREATER = 16
    GREATEREQ = 17
    IF = 18
    FOREACH = 19
    FORELEMENT = 20
    FORRANGE = 21
    WHILE = 22
    PRINT_VAR = 23
    PRINT_TEXT = 24
    VALUE = 25
    END_LOOP = 26
    LEFT_BR = 27
    RIGHT_BR = 28
    OPEN = 29
    CLOSE = 30
    ARRAYAND = 31
    STARTLOOP = 32
    ARRAY = 33
    ID = 34
    STRING = 35
    NUMBER = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'start'", "'zakoncz'", "'stworzZmienna'", "'stworzTablice'", 
            "'dodac'", "'odjac'", "'razy'", "'podzielicPrzez'", "'doPotegi'", 
            "','", "'rownaSie'", "'jestRowne'", "'jestMniejsze'", "'jestMniejszeLubRowne'", 
            "'jestWieksze'", "'jestWiekszeLubRowne'", "'jezeli'", "'dlaKazdegoElementu'", 
            "'dlaKazdejWartosci'", "'ZZakresu'", "'dopoki'", "'wypiszZmienna'", 
            "'wypiszTekst'", "'oWartosci'", "'koniecPetli'", "'['", "']'", 
            "'('", "')'", "'&'", "':'", "'nalezacegoDo'" ]

    symbolicNames = [ "<INVALID>",
            "SPACE", "PLUS", "MINUS", "MULTIPLICATION", "DIVIDE", "POWER", 
            "COMA", "EQ", "DOUBLEEQ", "LESS", "LESSEQ", "GREATER", "GREATEREQ", 
            "IF", "FOREACH", "FORELEMENT", "FORRANGE", "WHILE", "PRINT_VAR", 
            "PRINT_TEXT", "VALUE", "END_LOOP", "LEFT_BR", "RIGHT_BR", "OPEN", 
            "CLOSE", "ARRAYAND", "STARTLOOP", "ARRAY", "ID", "STRING", "NUMBER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "SPACE", "PLUS", "MINUS", 
                  "MULTIPLICATION", "DIVIDE", "POWER", "COMA", "EQ", "DOUBLEEQ", 
                  "LESS", "LESSEQ", "GREATER", "GREATEREQ", "IF", "FOREACH", 
                  "FORELEMENT", "FORRANGE", "WHILE", "PRINT_VAR", "PRINT_TEXT", 
                  "VALUE", "END_LOOP", "LEFT_BR", "RIGHT_BR", "OPEN", "CLOSE", 
                  "ARRAYAND", "STARTLOOP", "ARRAY", "ID", "STRING", "NUMBER" ]

    grammarFileName = "nlan.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


